# FILE: /report_code.txt

#1: Here, each element of 'cls.category' (which contains the category names) is passed as an argument to create a new object of 'CategoryModel' class. Each category read from the file will be used to instantiate a 'CategoryModel' object, which will be stored in the cat list.

#2: I decided to replace it with 'for' loops as usual, eliminating as many built-in functions as possible.

#3: Remember that 'items_sold' is of the 'ProductModel' class type, which has 'name', 'price' and 'category'.

#4: Response: ['Fruits', 'Vegetables', 'Legumes'].

#5: Response: ['bean|7|Legumes|Edson|Théo|3|14/12/2024'].

#6: Response: [['bean', '7', 'Legumes', 'Edson', 'Théo', '3', '14/12/2024']].

#7: Response: Théo.

#8: Response: bean.

#9: Response: 7.0.

#10: Response: Category registered successfully.

#11: Here, 'i' is an object of 'CategoryModel' class, which was created inside the read method of the 'CategoryDao' class. When the code gets to the line of 'if i.category == newcategory', it is accessing the category attribute of that 'CategoryModel' instance.

#12: I had to use '-1, -1, -1' to make the iteration start backwards, as I was getting an error. This occurred when I tried to access an index that is outside the range of the list. In this case, the error is happening inside the removal loop. This is probably because I removed elements from the list while iterating through it, which changes the access indexes, causing the code to try to access an invalid index after removing an item.

#13: If the product exists but there is not enough quantity.

#14: If the product exists. Yes or not.

#15: If 'quantity_stock' is False, it means that either the product was not found or the available quantity is not sufficient for sale. The 'elif not quantity_stock': line will be executed only if 'quantity_stock is False', that is, if the quantity was not sufficient for sale.

#16: Don't forget to use '[ ]'. I had big problems for not doing it this way.

#17: if not False = True. If not True = False.